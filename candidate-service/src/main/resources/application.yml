server:
  port: 8083

spring:
  application:
    name: candidate-service
  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password: ''
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  cloud:
    function:
      definition: updateCommunication;updateStatusCommunication
    stream:
      bindings:
        # ðŸ”¹ Candidate Added Event (output)
        sendCommunication-out-0:
          destination: candidate-added-events

        # ðŸ”¹ Candidate Added Communication Acknowledgment (input)
        updateCommunication-in-0:
          destination: candidate-communication-sent
          group: ${spring.application.name}

        # ðŸ”¹ Candidate Status Changed Event (output)
        sendStatusCommunication-out-0:
          destination: candidate-status-events

        # ðŸ”¹ Candidate Status Communication Acknowledgment (input)
        updateStatusCommunication-in-0:
          destination: candidate-status-communication-sent
          group: ${spring.application.name}
      kafka:
        binder:
          brokers:
            - localhost:9092




eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: "http://localhost:8070/eureka/"

resilience4j.ratelimiter:
  configs:
    default:
      limitForPeriod: 1
      limitRefreshPeriod: 5000
      timeoutDuration: 1000

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    liveness-state:
      enabled: true
    readiness-state:
      enabled: true
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

info:
  app:
    name: candidate-service
    description: Zapp_Mini Candidate Service Application
    version: 1.0.0

logging:
  level:
    com:
      zapp:
        candidate_service: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
